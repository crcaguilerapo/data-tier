/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.tables.Payment;
import jooq.tables.records.PaymentRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PaymentDao extends DAOImpl<PaymentRecord, jooq.tables.pojos.Payment, Integer> {

    /**
     * Create a new PaymentDao without any configuration
     */
    public PaymentDao() {
        super(Payment.PAYMENT, jooq.tables.pojos.Payment.class);
    }

    /**
     * Create a new PaymentDao with an attached configuration
     */
    public PaymentDao(Configuration configuration) {
        super(Payment.PAYMENT, jooq.tables.pojos.Payment.class, configuration);
    }

    @Override
    public Integer getId(jooq.tables.pojos.Payment object) {
        return object.getPaymentId();
    }

    /**
     * Fetch records that have <code>payment_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Payment> fetchRangeOfPaymentId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Payment.PAYMENT.PAYMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Payment> fetchByPaymentId(Integer... values) {
        return fetch(Payment.PAYMENT.PAYMENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>payment_id = value</code>
     */
    public jooq.tables.pojos.Payment fetchOneByPaymentId(Integer value) {
        return fetchOne(Payment.PAYMENT.PAYMENT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>payment_id = value</code>
     */
    public Optional<jooq.tables.pojos.Payment> fetchOptionalByPaymentId(Integer value) {
        return fetchOptional(Payment.PAYMENT.PAYMENT_ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Payment> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Payment.PAYMENT.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Payment> fetchByUserId(Integer... values) {
        return fetch(Payment.PAYMENT.USER_ID, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Payment> fetchRangeOfAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Payment.PAYMENT.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<jooq.tables.pojos.Payment> fetchByAmount(BigDecimal... values) {
        return fetch(Payment.PAYMENT.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>payment_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Payment> fetchRangeOfPaymentDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Payment.PAYMENT.PAYMENT_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_date IN (values)</code>
     */
    public List<jooq.tables.pojos.Payment> fetchByPaymentDate(LocalDateTime... values) {
        return fetch(Payment.PAYMENT.PAYMENT_DATE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Payment> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Payment.PAYMENT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<jooq.tables.pojos.Payment> fetchByStatus(String... values) {
        return fetch(Payment.PAYMENT.STATUS, values);
    }
}
